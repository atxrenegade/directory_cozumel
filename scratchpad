create new entries object that takes in form dataArray and converts to entry objects persisted in the database

schema

t.string "type"
t.string "date"
t.string "contributor"
t.string "contributor_email"
t.string "data_object_string"
t.string "notes"
t.string "resolved_date"
t.integer "admin_id"

class Entries < Application:: Record
end

form data
new business
[['id', 'new-bus'],
['bus-name', name],
['bus_address', address],
['bus-phone-number', phone_number],
['bus-website', website]]

bus1 = [['id', 'new-bus'],
['bus-name', 'Hotel California'],
['bus_address', '1234 Main st.'],
['bus-phone-number', '987-114-4339'],
['bus-website', 'http://www.hotelcalifornia.mx.com']]

new image
[['id', 'new-image'],
['image-url', url],
['image-description', description],
['image-date','date'],
['image-contributor', contributor],
['image-email', contributor_email]]

new review
[["id", new-review],
["review-rating", input],
["review-content", content],
["review_contributor", contributor],
["review_email", contributor_email]]

t.string "content"
t.string "contributor"
t.string "contributor_email"
t.integer "rating"
t.integer "business_id"
t.datetime "created_at", null: false
t.datetime "updated_at", null: false
t.index ["business_id"], name: "index_reviews_on_business_id"

update business
[['type', 'bus-edit'],
['edit-content', content],
['edit-contributor', contributor],
['edit-email', contributor_email]]

flag business
[['type', 'bus-flag'],
['flag-content', content],
['flag-contributor', flag contributor],
['flag-email', contributor_email]]

record = Entry.new
record['type'] = "bus-new"
record['bus_id'] = 99
record['date'] = "2019-12-22 17:11:20"
record['contributor'] = 'not specified'
record['contributor_email'] = 'not specified'
record['data_array'] = 'a bunch of data'
record['status'] = "pending"
record['resolved_date'] = 'n/a'
record['admin_id'] = 1
record['notes'] = ''
record.save


type = "bus-new"
bus_id = 99
date = "2019-12-22 17:11:20"
contributor = 'not specified'
contributor_email = 'not specified'
data_array = 'a bunch of data'
status = "pending"
resolved_date = 'n/a'
admin_id = 1
notes = ''
record = Entry.new(type, bus_id, date, contributor, contributor_email, data_array, status, resolved_date, admin_id, notes)
record.save

<tr> <!-- DYNAMICALLY GENERATE ENTRIES FROM DATABASE -->
	<td> 1 </td>
	<td> 12/23/19 </td>
	<td> LISTING </td>
	<td> APPROVED </td>
	<td> 12/24/19 </td>
	<td> 001 </td>
	<td> <button id='admin-entry-show-details'> More </button> </td>
</tr>


id	1
entry_type	new review
bus_id	1
date	2019-12-26 17:51:18
contributor	Harleigh
contributor_email	Harleigh@gmail.com
data_array	["My favorite hotel a bit expensive though.", "Harleigh", "Harleigh@gmail.com", "4"]
status	pending
resolved_date	n/a
admin_id	1
notes
created_at	2019-12-26T22:51:18.446Z
updated_at	2019-12-26T22:51:18.446Z

	let cell9 = row.insertCell(8);
	/* cell9.innerHTML = "<button id='admin-entry-show-details'> More </button>" */

	RACE CONDITION WITH indexPendingEntries()?

ADMIN - reject entry
		add Event Listener to reject button
		create reject function:
			change entry values /status/date resolved/admin_id
			reject function should create post request to entries entry table
			return to updated entries index

			3 FUNCTIONS

			rejectEntry() - calls all other rejectFunctions;
			postReject() - posts updated reject values;
			displayReject() - updates DOM, returns to updated entries index

			POST Request
			updating Entry values
			:admin_id
			:resolved_date
			:status

			persist in database

			update DOM with new entry values

		TO DO

		ADMIN LOGIN Panel
		1. get userID
		2. add Login Date
		2. get businessName
		3. reformat dataArray to Data Object

		4. FIX post Request for reject, and add notes
		5. FIX back button missing event listeners
		6. clear notes field on submission and page reload

		7. Add functionality to Resolve

		8. Add functionality to Revise
*******************************************

		9. add functionality to admin menu buttons
		9.5 user forms display only one at a time
		10. add user authentication and encryption for admin login
		11. googlemaps pin

		12. refactor create js classes and move methods to classes.
		13. Add Styling
		14. Demo Video
		15. Blog Post
